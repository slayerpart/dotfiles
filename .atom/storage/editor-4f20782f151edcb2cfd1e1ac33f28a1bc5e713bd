{"version":1,"windowDimensions":{"x":-31,"y":23,"width":1634,"height":1027,"maximized":false},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/Marvin/Documents/Studium/Bachelorprojekt/mongo"],"buffers":[{"id":"9fcfb0cedf2b65b63bf13174896ae59a","text":"from pymongo import MongoClient\nimport py2neo\nfrom elasticsearch import Elasticsearch\n\n# Credentials\nMONGO = 'mongodb://BP2015N1WS02:27017'\nNEO = 'BP2015N1WS02:7474'\nNEOUSER = 'neo4j'\nNEOPW = 'Naumann2015'\nNEOGRAPH = 'http://BP2015N1WS02:7474/db/data/'\nELASTIC = 'http://BP2015N1WS02:9200'\n\ndef getMongoCollection(collection='contagion'):\n    client = MongoClient(MONGO)\n    return client[collection]\n\ndef get_local_neo_graph():\n    pw = 'admin'\n    py2neo.authenticate('localhost:7474', 'neo4j', pw)\n    graph = py2neo.Graph('http://localhost:7474/db/data')\n    return graph\n\ndef getNeoGraph():\n    py2neo.authenticate(NEO, NEOUSER, NEOPW)\n    graph = py2neo.Graph(NEOGRAPH)\n    return graph\n\ndef getElasticCluster():\n    return Elasticsearch(ELASTIC)\n\ndef create_collection(name, indices_on):\n    # Create Dict-Collection to collect occurrences, apply indices/index\n    client = getMongoCollection()\n    try:\n        client.drop_collection(name)\n    except:\n        print('Collection named %s does not exist yet - Will be created' % name)\n    client.create_collection(name)\n    for index in indices_on:\n        client[name].create_index(index)\n    return cient[name]\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"7":{"range":{"start":{"row":16,"column":0},"end":{"row":22,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":20,"column":16},"end":{"row":20,"column":16}},"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":5,"history":{"version":3,"nextCheckpointId":10,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[14,29],[14,29]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[14,29],[14,29]],"newRange":[[14,29],[15,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[15,0],[15,0]],"newRange":[[15,0],[15,4]],"oldText":"","newText":"    "}},{"type":"change","content":{"oldRange":[[15,4],[15,4]],"newRange":[[15,4],[16,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[16,0],[16,0]],"newRange":[[16,0],[16,4]],"oldText":"","newText":"    "}},{"type":"change","content":{"oldRange":[[15,0],[15,4]],"newRange":[[15,0],[15,0]],"oldText":"    ","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[16,4],[16,4]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[16,4],[16,4]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[16,0],[16,4]],"newRange":[[16,0],[16,0]],"oldText":"    ","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[16,0],[16,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[16,0],[16,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[16,0],[16,0]],"newRange":[[16,0],[20,16]],"oldText":"","newText":"def get_local_neo_graph():\n    pw = 'admin'\n    py2neo.authenticate('localhost:7474', 'neo4j', pw)\n    graph = py2neo.Graph('http://localhost:7474/db/data')\n    return graph"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[20,16],[20,16]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/Marvin/Documents/Studium/Bachelorprojekt/mongo/databaseConnection.py","digestWhenLastPersisted":"3248968b331d7c1bd9c4b7aa349e1a89a1c03ede","preferredLineEnding":null,"nextMarkerId":8,"deserializer":"TextBuffer","version":5},{"id":"d0c4cb9f99aed4d38233398f36e3ac1b","text":"USING PERIODIC COMMIT 5000\nLOAD CSV WITH HEADERS FROM \"file:///home/bpn1/workspace/mongoToNeo/agent_aliases.csv\" AS csvline\nMERGE (comp:Agent { legal_name: csvline.legal_name, source: csvline.source})\nON CREATE SET comp.source = 'Bundesanzeiger'\nMERGE (alias:Alias { name: csvline.alias })\nCREATE (comp)-[:KNOWN_AS]->(alias);\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"6":{"id":"6","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":7,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/Marvin/Documents/Studium/Bachelorprojekt/mongo/importAliases.cypher","digestWhenLastPersisted":"b855c096cbae9daf9601c24edb0a68d6dfa0c852","preferredLineEnding":null,"nextMarkerId":12,"deserializer":"TextBuffer","version":5},{"id":"0695cee7175e2a4879c4a62c3d183cf9","text":"from databaseConnection import getMongoCollection, getNeoGraph\nfrom multiprocessing import Pool\nfrom itertools import repeat\nimport re\n\n\nclass Company:\n\n    def __init__(self, company_id, legal_name):\n        self.company_id = company_id\n        self.legal_name = legal_name\n        self.aliases = set()\n\n\ndef main():\n    contagion_db = getMongoCollection()\n    neo_graph = getNeoGraph()\n    processes = 8\n    interval_size = 1000\n    pool = Pool(processes)\n\n    occurrences = ['occurrences6', 'occurrences5', 'occurrences4',\n                   'occurrences3', 'occurrences2', 'occurrences1']\n\n    print('Start fetching entries...')\n    blacklist = get_blacklist(contagion_db, occurrences)\n\n    print('Start computing aliases...')\n    alias_count = 800000\n    chunk_size = 50000\n    index = 0\n    while index < alias_count:\n        companies = get_companies(neo_graph, index, chunk_size)\n        print('Start matching')\n        aliases = pool.map(generate_aliases,\n                           zip(companies, repeat(blacklist)),\n                           interval_size)\n        print('Dump...')\n        dump_aliases(aliases)\n        index += chunk_size\n\n\ndef normalize_name(name):\n        special_char_re = r'[^A-Za-z0-9]+'\n        multiple_spaces_re = r'\\s\\s+'\n        name = re.sub(special_char_re, ' ', name)\n        name = re.sub(multiple_spaces_re, ' ', name)\n        return name.strip().lower()\n\n\ndef get_companies(neo_graph, index, chunk_size):\n    print('{} - {}'.format(index, index + chunk_size))\n    query = \"\"\"MATCH(a:Agent)\n                WHERE HAS(a.legal_name)\n                RETURN ID(a), a\n                ORDER BY ID(a) SKIP {0} LIMIT {1}\"\"\"\n\n    companies = []\n    limited_query = query.format(index, chunk_size)\n    stream = neo_graph.cypher.stream(limited_query)\n    for record in stream:\n        company_id = record[0]\n        legal_name = record[1]['legal_name']\n        legal_name = normalize_name(legal_name)\n        companies.append(Company(company_id, legal_name))\n    stream.close()\n    return companies\n\n\ndef get_blacklist(contagion_db, occurrences):\n    blacklists = []\n    for occurrence in occurrences:\n        sub_list = []\n        results = contagion_db[occurrence].find({'eval': 'y'})\n        for result in results:\n            phrase = normalize_name(result['phrase'])\n            sub_list.append(phrase)\n        blacklists.append(sub_list)\n    return blacklists\n\n\ndef generate_aliases(zipped_tuple):\n    company, blacklists = zipped_tuple\n\n    aliases = [set()]\n    aliases[-1].add(company.legal_name)\n\n    for blacklist in blacklists:\n        new_aliases = set()\n        for term in blacklist:\n            for alias in aliases[-1]:\n                subst = replace_word(alias, term)\n                if subst and len(subst) >= 3:\n                    if len(subst) == 3 and ' ' in subst:\n                        continue\n                    new_aliases.add(subst)\n        if len(new_aliases) > 0:\n            aliases.append(new_aliases)\n\n    new_aliases = set()\n    for terms in aliases:\n        new_aliases = new_aliases.union(terms)\n    company.aliases = new_aliases\n    return company\n\n\ndef replace_word(company_name, term):\n    company_name = ''.join([' '] + [c for c in company_name] + [' '])\n    term = ''.join([' '] + [c for c in term] + [' '])\n    substitute = company_name.replace(term, ' ')\n    if substitute == company_name:\n        return\n    return ' '.join(substitute.split())\n\n\ndef load_dict(path='data/wikipedia2000.txt'):\n    with open(path, 'r') as f:\n        return set([w.strip().lower() for w in f])\n\n\ndef dump_aliases(aliases):\n    dictionary = load_dict()\n    with open('aliases.csv', 'a') as f:\n        for company in aliases:\n            for alias in company.aliases:\n                if alias not in dictionary:\n                    f.write('{},\"{}\"\\n'.format(company.company_id, alias))\n\n\nif __name__ == '__main__':\n    main()\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":90,"column":37},"end":{"row":90,"column":37}},"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":5,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/Marvin/Documents/Studium/Bachelorprojekt/mongo/buildAliases.py","digestWhenLastPersisted":"ed27294ad3c698956550ed05bff452ca3459a83a","preferredLineEnding":null,"nextMarkerId":2,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":4,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":5,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/Marvin/Documents/Studium/Bachelorprojekt/mongo/databaseConnection.py","bufferId":"9fcfb0cedf2b65b63bf13174896ae59a","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":8,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":9,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/Marvin/Documents/Studium/Bachelorprojekt/mongo/importAliases.cypher","bufferId":"d0c4cb9f99aed4d38233398f36e3ac1b","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":12,"softTabs":true,"firstVisibleScreenRow":81,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":13,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/Marvin/Documents/Studium/Bachelorprojekt/mongo/buildAliases.py","bufferId":"0695cee7175e2a4879c4a62c3d183cf9","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/Users/Marvin/Documents/Studium/Bachelorprojekt/mongo/buildAliases.py","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-python","language-hyperlink","language-todo"],"destroyedItemURIs":["/Users/Marvin/Documents/Studium/Bachelorprojekt/mongo/importOccurrences.cypher"]},"packageStates":{"fuzzy-finder":{"/Users/Marvin/Documents/Studium/Bachelorprojekt/mongo/databaseConnection.py":1458147782841,"/Users/Marvin/Documents/Studium/Bachelorprojekt/mongo/importAliases.cypher":1458149812950,"/Users/Marvin/Documents/Studium/Bachelorprojekt/mongo/buildAliases.py":1458162439134},"keybinding-resolver":{},"metrics":{"sessionLength":15471362},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/Marvin/Documents/Studium/Bachelorprojekt/mongo":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"cooccurrences":{"isExpanded":false,"entries":{}},"data":{"isExpanded":false,"entries":{}},"__pycache__":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/Marvin/Documents/Studium/Bachelorprojekt/mongo/buildAliases.py","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":347}},"fullScreen":false}