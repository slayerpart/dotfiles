{"version":1,"windowDimensions":{"x":3,"y":23,"width":1628,"height":1027,"maximized":true},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/Marvin/Documents/work/flask_tut/FlaskBlog"],"buffers":[{"id":"ddcf59b135fdcd70571c86adaf104c0c","text":"from models import Person, Article, Category\nfrom flask import render_template, request, session, url_for, redirect, flash\nfrom forms import SignupForm, ArticleCreateForm, ArticleUpdateForm, SigninForm, CategoryCreateForm, PersonUpdateForm\nfrom app import app, db\n\n@app.route('/')\ndef index():\n    articles = Article.all()\n    if 'email' in session:\n        person = Person.query.filter_by(email=session['email']).first()\n        name = person.firstname\n        return render_template('index.html', articles=articles, name=name)\n    return render_template('index.html', articles=articles)\n\n@app.route('/signup', methods=['GET', 'POST'])\ndef signup():\n    form = SignupForm()\n    if form.validate_on_submit():\n        newperson = Person(form.firstname.data, form.lastname.data, form.email.data, form.password.data)\n        db.session.add(newperson)\n        db.session.commit()\n        session['email'] = newperson.email\n        person = Person.query.filter_by(email=session['email']).first()\n        name = person.firstname\n\n        return redirect(url_for('dashboard',name=name))\n    return render_template('signup.html', form=form)\n\n@app.route('/create', methods=['GET', 'POST'])\ndef article_create():\n    if 'email' not in session:\n        return redirect(url_for('signin'))\n    person = Person.query.filter_by(email=session['email']).first()\n    name = person.firstname\n    article = Article()\n    form = ArticleCreateForm()\n    form.person_name.data = person.firstname\n    if form.validate_on_submit():\n        form.populate_obj(article)\n        db.session.add(article)\n        db.session.commit()\n        return redirect(url_for('index'))\n    return render_template('create.html', form=form, person=person, name=name)\n\n@app.route('/signin', methods=['GET', 'POST'])\ndef signin():\n  form = SigninForm()\n  if form.validate_on_submit():\n      session['email'] = form.email.data\n      person = Person.query.filter_by(email=session['email']).first()\n      name = person.firstname\n      flash('You are logged in')\n      return redirect(url_for('dashboard', name=name))\n  return render_template('signin.html', form=form)\n\n\n@app.route('/signout')\ndef signout():\n    if 'email' not in session:\n        return redirect(url_for('signin'))\n    session.pop('email', None)\n    return redirect(url_for('index'))\n\n@app.errorhandler(404)\ndef HTTPNotFound(e):\n    return render_template('error.html'), 404\n\n@app.route('/article/<int:id>/<slug>')\ndef show_article(id, slug):\n    article = Article.find_by_id(id)\n    if 'email' in session:\n        person = Person.query.filter_by(email=session['email']).first()\n        name = person.firstname\n        return render_template('show_article.html', article=article, name=name)\n    return render_template('show_article.html', article=article)\n\n@app.route('/article/<int:id>/<slug>/edit', methods=['GET', 'POST'])\ndef article_update(id, slug):\n    article = Article.find_by_id(id)\n    if not article:\n        return HTTPNotFound(404)\n    form = ArticleUpdateForm(request.form, article)\n    person = Person.query.filter_by(email=session['email']).first()\n    name = person.firstname\n    if form.validate_on_submit():\n        form.populate_obj(article)\n        db.session.add(article)\n        db.session.commit()\n        return redirect(url_for('index'))\n    return render_template('create.html', form=form, name=name)\n\n@app.route('/category/create', methods=['GET', 'POST'])\ndef category():\n    form = CategoryCreateForm()\n    category = Category()\n    person = Person.query.filter_by(email=session['email']).first()\n    name = person.firstname\n    if form.validate_on_submit():\n        form.populate_obj(category)\n        db.session.add(category)\n        db.session.commit()\n        return redirect(url_for('dashboard', name=name))\n    return render_template('cat_create.html', form=form)\n\n@app.route('/author/<name>', methods=['GET'])\ndef author(name):\n    author_articles = Article.find_by_author(name)\n    if 'email' in session:\n        person = Person.query.filter_by(email=session['email']).first()\n        name = person.firstname\n        return render_template('author.html', author_articles=author_articles, name=name)\n    return render_template('author.html', author_articles=author_articles)\n\n@app.route('/category/<category>', methods=['GET'])\ndef category_articles(category):\n    category_articles = Article.find_by_category(category)\n    if 'email' in session:\n        person = Person.query.filter_by(email=session['email']).first()\n        name = person.firstname\n        return render_template('category_view.html', category_articles=category_articles, name=name)\n    return render_template('category_view.html', category_articles=category_articles)\n\n@app.route('/dashboard/<name>')\ndef dashboard(name):\n    if 'email' not in session:\n        return redirect(url_for('index'))\n    person = Person.query.filter_by(email=session['email']).first()\n    if name == person.firstname:\n        articles = Article.find_by_author(name)\n        person = Person.query.filter_by(email=session['email']).first()\n        name = person.firstname\n        return render_template('dashboard.html', articles=articles, person=person, name=name)\n    return redirect(url_for('index'))\n\n@app.route('/article/<int:id>/<slug>/delete', methods=['GET','POST'])\ndef delete(id, slug):\n    article = Article.find_by_id(id)\n    person = Person.query.filter_by(email=session['email']).first()\n    name = person.firstname\n    db.session.delete(article)\n    db.session.commit()\n    return redirect(url_for('dashboard', name=name))\n\n@app.route('/settings', methods=['GET', 'POST'])\ndef settings():\n    articles = Article.all()\n    if 'email' in session:\n        person = Person.query.filter_by(email=session['email']).first()\n        form = PersonUpdateForm(request.form, person)\n        name = person.firstname\n        if form.validate_on_submit():\n            form.populate_obj(person)\n            db.session.merge(person)\n            db.session.commit()\n            return render_template('index.html', articles=articles)\n        return render_template('settings.html', form=form, name=name)\n    return render_template('index.html', articles=articles)\n\n@app.route('/author/delete', methods=['GET','POST'])\ndef delete_profile():\n    person = Person.query.filter_by(email=session['email']).first()\n    articles = Article.find_by_author(person.firstname)\n    for article in articles:\n        db.session.delete(article)\n    db.session.delete(person)\n    db.session.commit()\n    session.pop('email', None)\n    return redirect(url_for('index'))\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":5,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/Marvin/Documents/work/flask_tut/FlaskBlog/app/views.py","digestWhenLastPersisted":"17ff6d3c77076392c563dc863c5291261cd252ae","preferredLineEnding":null,"nextMarkerId":2,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":52,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":53,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/Marvin/Documents/work/flask_tut/FlaskBlog/app/views.py","bufferId":"ddcf59b135fdcd70571c86adaf104c0c","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/Users/Marvin/Documents/work/flask_tut/FlaskBlog/app/views.py","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-python","language-hyperlink","language-todo"],"destroyedItemURIs":["/Users/Marvin/Documents/work/flask_tut/FlaskBlog/requirements.txt","/Users/Marvin/Documents/work/flask_tut/FlaskBlog/Procfile","/Users/Marvin/Documents/work/flask_tut/FlaskBlog/manage.py","/Users/Marvin/Documents/work/flask_tut/FlaskBlog/heroku.py","/Users/Marvin/Documents/work/flask_tut/FlaskBlog/config.py","/Users/Marvin/Documents/work/flask_tut/FlaskBlog/.gitignore","/Users/Marvin/Documents/work/flask_tut/FlaskBlog/migrations/env.py","/Users/Marvin/Documents/work/flask_tut/FlaskBlog/app/__init__.py","/Users/Marvin/Documents/work/flask_tut/FlaskBlog/app/forms.py","/Users/Marvin/Documents/work/flask_tut/FlaskBlog/app/models.py","/Users/Marvin/Documents/work/flask_tut/FlaskBlog/app/templates/index.html"]},"packageStates":{"fuzzy-finder":{"/Users/Marvin/Documents/work/flask_tut/FlaskBlog/app/views.py":1459513077508},"keybinding-resolver":{},"metrics":{"sessionLength":727650},"tree-view":{"directoryExpansionStates":{"/Users/Marvin/Documents/work/flask_tut/FlaskBlog":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"app":{"isExpanded":true,"entries":{"static":{"isExpanded":true,"entries":{"css":{"isExpanded":false,"entries":{}},"js":{"isExpanded":false,"entries":{}},"tinymce":{"isExpanded":false,"entries":{}}}},"templates":{"isExpanded":false,"entries":{}}}},"migrations":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/Marvin/Documents/work/flask_tut/FlaskBlog/app/views.py","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}},"fullScreen":false}