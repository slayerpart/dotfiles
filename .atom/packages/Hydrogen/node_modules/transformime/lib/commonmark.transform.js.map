{"version":3,"sources":["../src/commonmark.transform.js"],"names":["commonmark","require","MarkdownTransform","reader","Parser","writer","HtmlRenderer","safe","mimetype","data","document","div","createElement","parsed","parse","innerHTML","render"],"mappings":"AAAA;;;;;AAEA,IAAIA,aAAaC,QAAQ,YAAR,CAAjB;;AAEA;;;;;;;;;;;;AAYA,IAAIC,oBAAoB,YAAU;AAC9B;;AAEA,QAAIC,SAAS,IAAIH,WAAWI,MAAf,EAAb;AACA,QAAIC,SAAS,IAAIL,WAAWM,YAAf,CAA4B;AACrCC,cAAM;AAD+B,KAA5B,CAAb;;AAIA,WAAO,UAASC,QAAT,EAAmBC,IAAnB,EAAyBC,QAAzB,EAAmC;AACtC,YAAIC,MAAMD,SAASE,aAAT,CAAuB,KAAvB,CAAV;;AAEA,YAAIC,SAASV,OAAOW,KAAP,CAAaL,IAAb,CAAb;;AAEA;AACA;;AAEAE,YAAII,SAAJ,GAAgBV,OAAOW,MAAP,CAAcH,MAAd,CAAhB;;AAEA,eAAOF,GAAP;AACH,KAXD;AAYH,CApBuB,EAAxB;;AAsBAT,kBAAkBM,QAAlB,GAA6B,eAA7B;;QAESN,iB,GAAAA,iB","file":"commonmark.transform.js","sourcesContent":["\"use strict\"\n\nvar commonmark = require(\"commonmark\")\n\n/**\n * This is a function expression providing closure such that a reader\n * and writer is only created once.\n * @function\n * @description Converts data with a markdown mimetype to an HTML div element.\n * @param {string} mimetype -  The mimetype of the data to be transformed,\n * it is unused by this function but included for a common API.\n * @param {string} data - The markdown data to be transformed.\n * @param {Document} document - A Document Object Model to be used for\n * creating an element.\n * @return {HTMLElement} - An HTML div containing the transformed markdown.\n */\nvar MarkdownTransform = function(){\n    // Stick reader and writer in a closure so they only get created once.\n\n    let reader = new commonmark.Parser()\n    let writer = new commonmark.HtmlRenderer({\n        safe: true\n    })\n\n    return function(mimetype, data, document) {\n        var div = document.createElement(\"div\")\n\n        var parsed = reader.parse(data)\n\n        // TODO: Any other transformations on the parsed object\n        // See https://github.com/jgm/commonmark.js#usage\n\n        div.innerHTML = writer.render(parsed)\n\n        return div\n    }\n}();\n\nMarkdownTransform.mimetype = 'text/markdown'\n\nexport { MarkdownTransform }\n"]}