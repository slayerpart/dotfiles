{"version":3,"sources":["../src/transformime.js"],"names":["Transformime","transformers","push","forEach","transformer","bundle","document","length","Promise","reject","Error","Object","keys","richMimetype","richTransformer","mimetype","transformer_mimetypes","Array","isArray","transformer_mimetype","resolve","call","then","el","e","join","mimetypes","i","splice","indexOf","del","transform","_proxy","args","createTransform","doc","t","TextTransform","ImageTransform","HTMLTransform","SVGTransform","PDFTransform","ScriptTransform","LaTeXTransform","MarkdownTransform"],"mappings":"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","file":"transformime.js","sourcesContent":["'use strict'\n\nimport { TextTransform } from './text.transform'\nimport { ImageTransform } from './image.transform'\nimport { HTMLTransform } from './html.transform'\nimport { SVGTransform } from './svg.transform'\nimport { PDFTransform } from './pdf.transform'\nimport { ScriptTransform } from './script.transform'\nimport { LaTeXTransform } from './latex.transform'\nimport { MarkdownTransform } from './commonmark.transform'\n/**\n * Transforms mimetypes into HTMLElements\n */\nclass Transformime {\n\n  /**\n   * Public constructor\n   * @param  {function[]} transformers - list of transformers, in reverse priority order.\n   */\n  constructor (transformers) {\n    // Initialize instance variables.\n    this.transformers = []\n    this.push(TextTransform)\n    this.push(ImageTransform)\n    this.push(SVGTransform)\n    this.push(HTMLTransform)\n    this.push(PDFTransform)\n    this.push(ScriptTransform)\n    this.push(MarkdownTransform)\n    this.push(LaTeXTransform)\n    if (transformers) transformers.forEach((transformer) => { this.push(transformer) })\n  }\n  /**\n   * Transforms a mime bundle, using the richest available representation,\n   * into an HTMLElement.\n   * @param  {any}      bundle - {mimetype1: data1, mimetype2: data2, ...}\n   * @param  {Document} document - Any of window.document, iframe.contentDocument\n   * @return {Promise<{mimetype: string, el: HTMLElement}>}\n   */\n  transform (bundle, document) {\n    if (this.transformers.length <= 0) {\n      // Empty transformers\n      return Promise.reject(new Error('No transformers configured'))\n    }\n\n    if (Object.keys(bundle).length <= 0) {\n      return Promise.reject(new Error('MIME Bundle empty'))\n    }\n\n    let richMimetype\n    let richTransformer\n\n    // Choose the last transformer as the most rich\n    for (let transformer of this.transformers) {\n      if (transformer.mimetype) {\n        // Make sure the transformer's mimetype is in array format.\n        let transformer_mimetypes = transformer.mimetype\n        if (!Array.isArray(transformer_mimetypes)) {\n          transformer_mimetypes = [transformer_mimetypes]\n        }\n\n        for (let transformer_mimetype of transformer_mimetypes) {\n          if (transformer_mimetype in bundle) {\n            richMimetype = transformer_mimetype\n            richTransformer = transformer\n          }\n        }\n      }\n    }\n\n    if (richMimetype && richTransformer) {\n      // Don't assume the transformation will return a promise.  Also\n      // don't assume the transformation will succeed.\n      try {\n        return Promise.resolve(richTransformer.call(richTransformer,\n          richMimetype, bundle[richMimetype], document)).then(el => {\n            return { mimetype: richMimetype, el: el }\n          })\n      } catch (e) {\n        return Promise.reject(e)\n      }\n    } else {\n      return Promise.reject(new Error('Transformer(s) for ' + Object.keys(bundle).join(', ') + ' not found.'))\n    }\n  }\n\n  /**\n   * Deletes all transformers by mimetype.\n   * @param {string|string[]} mimetype - mimetype the data type (e.g. text/plain, text/html, image/png)\n   */\n  del (mimetype) {\n    // Convert mimetype to an array.\n    let mimetypes = mimetype\n    if (!Array.isArray(mimetypes)) {\n      mimetypes = [mimetypes]\n    }\n\n    // Remove each mimetype.\n    for (mimetype of mimetypes) {\n      for (let i = 0; i < this.transformers.length; i++) {\n        var transformer = this.transformers[i]\n\n        // If the mimetype matches the one we want to remove, remove it.\n        if (mimetype === transformer.mimetype) {\n          this.transformers.splice(i, 1)\n          i--\n\n        // If the mimetype we want to remove is in the list of the\n        // mimetypes supported by the transformer, remove it from the list.\n        // If the transformer mimetype list is then empty, remove the\n        // transformer.\n        } else if (Array.isArray(transformer.mimetype) && mimetype in transformer.mimetype) {\n          if (transformer.mimetype.length === 1) {\n            this.transformers.splice(i, 1)\n            i--\n          } else {\n            transformer.mimetype.splice(transformer.mimetype.indexOf(mimetype), 1)\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Gets a transformer matching the mimetype\n   * @param {string} mimetype - the data type (e.g. text/plain, text/html, image/png)\n   * @return {function} Matching transformer\n   */\n  get (mimetype) {\n    // Loop through the transformers array in reverse.\n    for (let i = this.transformers.length - 1; i >= 0; i--) {\n      let transformer = this.transformers[i]\n\n      // Get an array of the mimetypes that the transformer supports.\n      let transformer_mimetypes = transformer.mimetype\n      if (!Array.isArray(transformer_mimetypes)) {\n        transformer_mimetypes = [transformer_mimetypes]\n      }\n\n      // Check if any of the mimetypes match the one we are looking for.\n      for (let transformer_mimetype of transformer_mimetypes) {\n        if (mimetype === transformer_mimetype) {\n          return transformer\n        }\n      }\n    }\n  }\n\n  /**\n   * Sets a transformer matching the mimetype\n   * @param {string|string[]} mimetype - the data type (e.g. text/plain, text/html, image/png)\n   * @param {function} transformer\n   * @return {function} inserted transformer function (may be different than arg)\n   */\n  set (mimetype, transformer) {\n    this.del(mimetype)\n    return this.push(transformer, mimetype)\n  }\n\n  /**\n   * Appends a transformer to the transformer list.\n   * @param  {function} transformer\n   * @param  {string|string[]} mimetype\n   * @return {function} inserted transformer function (may be different than arg)\n   */\n  push (transformer, mimetype) {\n    // If the mimetype specified is different than the mimetype of the\n    // transformer, make a copy of the transformer and set the new mimetype\n    // on the copy.\n    let transform = transformer\n    if (mimetype && transformer.mimetype !== mimetype) {\n      transform = this._proxy(transformer, mimetype)\n    }\n\n    // Verify a mimetype is set on the transformer.\n    if (!transform.mimetype) throw Error('Could not infer transformer mimetype')\n\n    this.transformers.push(transform)\n    return transform\n  }\n\n  /**\n   * Create a proxy to a transformer, using another mimetype.\n   * @param  {function} transformer\n   * @param  {string|string[]} mimetype\n   * @return {function} transformer\n   */\n  _proxy (transformer, mimetype) {\n    let transform = function (...args) { return transformer.call(this, ...args) }\n    transform.mimetype = mimetype\n    return transform\n  }\n}\n\n/**\n* Helper to create a function that transforms a MIME bundle into an HTMLElement\n* using the given document and list of transformers.\n* @param  {function[]} [transformers] List of transformers, in reverse priority order.\n* @param  {Document}   [doc]          E.g. window.document, iframe.contentDocument\n* @return {function}\n*/\nfunction createTransform (transformers, doc) {\n  const t = new Transformime(transformers)\n\n  if (!doc) {\n      doc = document\n  }\n\n  /**\n   * Transforms a MIME bundle into an HTMLElement.\n   * @param  {object} bundle {mimetype1: data1, mimetype2: data2, ...}\n   * @return {Promise<{mimetype: string, el: HTMLElement}>}\n   */\n  return function transform(bundle) {\n    return t.transform(bundle, doc)\n  }\n}\n\nexport {\n    Transformime,\n    TextTransform,\n    ImageTransform,\n    HTMLTransform,\n    SVGTransform,\n    PDFTransform,\n    ScriptTransform,\n    LaTeXTransform,\n    MarkdownTransform,\n    createTransform\n};\n"]}