(function() {
  var Point, PythonTools, Range, _ref;

  PythonTools = require('../lib/python-tools');

  _ref = require('atom'), Point = _ref.Point, Range = _ref.Range;

  describe("PythonTools", function() {
    var pythonTools;
    pythonTools = null;
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.packages.activatePackage('python-tools');
      });
      waitsForPromise(function() {
        return atom.packages.activatePackage('language-python');
      });
      return runs(function() {
        return pythonTools = atom.packages.getActivePackage('python-tools').mainModule;
      });
    });
    describe("when running jedi commands", function() {
      var editor;
      editor = null;
      beforeEach(function() {
        waitsForPromise(function() {
          return atom.workspace.open('test.py');
        });
        return runs(function() {
          editor = atom.workspace.getActiveTextEditor();
          return editor.setText("import json");
        });
      });
      return it("does not send too many commands over time", function() {
        editor.setCursorBufferPosition(new Point(0, 9));
        spyOn(pythonTools, 'handleJediToolsResponse');
        waitsForPromise(function() {
          return pythonTools.jediToolsRequest('gotoDef');
        });
        return waitsForPromise(function() {
          return pythonTools.jediToolsRequest('gotoDef').then(function() {
            return expect(pythonTools.handleJediToolsResponse.calls.length).toEqual(2);
          });
        });
      });
    });
    describe("when running the goto definitions command", function() {
      var editor;
      editor = null;
      beforeEach(function() {
        waitsForPromise(function() {
          return atom.workspace.open('mike.py');
        });
        return runs(function() {
          editor = atom.workspace.getActiveTextEditor();
          return editor.setText("import json\n\nclass Snake(object):\n    def slither(self, dict):\n        return json.dumps(dict)\n\nsnake = Snake()\nsnake.slither({'x': 10, 'y': 20})\n\ni_dont_exist()");
        });
      });
      it("moves to the correct class location", function() {
        editor.setCursorBufferPosition(new Point(6, 9));
        return waitsForPromise(function() {
          return pythonTools.jediToolsRequest('gotoDef').then(function() {
            return expect(editor.getCursorBufferPosition()).toEqual(new Point(3, 6));
          });
        });
      });
      it("moves to the correct method location", function() {
        editor.setCursorBufferPosition(new Point(7, 7));
        return waitsForPromise(function() {
          return pythonTools.jediToolsRequest('gotoDef').then(function() {
            return expect(editor.getCursorBufferPosition()).toEqual(new Point(4, 8));
          });
        });
      });
      it("does nothing if symbol does not exist", function() {
        editor.setCursorBufferPosition(new Point(9, 7));
        return waitsForPromise(function() {
          return pythonTools.jediToolsRequest('gotoDef').then(function() {
            return expect(editor.getCursorBufferPosition()).toEqual(new Point(9, 7));
          });
        });
      });
      return it("opens appropriate file if required", function() {
        editor.setCursorBufferPosition(new Point(0, 9));
        spyOn(atom.workspace, 'open').andCallThrough();
        return waitsForPromise(function() {
          return pythonTools.jediToolsRequest('gotoDef').then(function() {
            var path;
            path = atom.workspace.open.mostRecentCall.args[0];
            if (/^win/.test(process.platform)) {
              return expect(path).toMatch(/.*\\json\\__init__.py/);
            } else {
              return expect(path).toMatch(/.*\/json\/__init__.py/);
            }
          });
        });
      });
    });
    describe("when tools.py gets an invalid request", function() {
      var editor;
      editor = null;
      return beforeEach(function() {
        waitsForPromise(function() {
          return atom.workspace.open('error.py');
        });
        return runs(function() {
          return editor = atom.workspace.getActiveTextEditor();
        });
      });
    });
    describe("when running the show usages command", function() {
      var editor;
      editor = null;
      beforeEach(function() {
        waitsForPromise(function() {
          return atom.workspace.open('foo.py');
        });
        return runs(function() {
          editor = atom.workspace.getActiveTextEditor();
          return editor.setText("def my_function(a, b):\n    return a + b\n\nprint my_function(10, 20)");
        });
      });
      it("selects the correct symbols", function() {
        editor.setCursorBufferPosition(new Point(3, 8));
        return waitsForPromise(function() {
          return pythonTools.jediToolsRequest('usages').then(function() {
            return expect(editor.getSelectedBufferRanges()).toEqual([new Range(new Point(0, 4), new Point(0, 15)), new Range(new Point(3, 6), new Point(3, 17))]);
          });
        });
      });
      return it("doesn't alter current selection on no results", function() {
        editor.setCursorBufferPosition(new Point(3, 2));
        return waitsForPromise(function() {
          return pythonTools.jediToolsRequest('usages').then(function() {
            return expect(editor.getSelectedBufferRanges()).toEqual([new Range(new Point(3, 2), new Point(3, 2))]);
          });
        });
      });
    });
    describe("when running the select string command", function() {
      var editor;
      editor = null;
      beforeEach(function() {
        waitsForPromise(function() {
          return atom.workspace.open('lolcat.py');
        });
        return runs(function() {
          editor = atom.workspace.getActiveTextEditor();
          return editor.setText("class Lolcat(object):\n  mystring = 'hello world'\n  anotherstring = \"this is some text\"\n  block_text = \"\"\"\n  This was a triumph!\n  I'm making a note here:\n  Huge success!\n  \"\"\"\n  more_blocks = '''\n  This is some text\n  '''\n  sql_text = \"\"\"SELECT *\n  FROM foo\n  \"\"\"\n  sql_text2 = '''SELECT *\n  FROM bar\n  '''");
        });
      });
      it("selects single-line single qoutes correctly", function() {
        editor.setCursorBufferPosition(new Point(1, 17));
        pythonTools.selectAllString();
        return expect(editor.getSelectedBufferRange()).toEqual(new Range(new Point(1, 14), new Point(1, 25)));
      });
      it("selects single-line double qoutes correctly", function() {
        editor.setCursorBufferPosition(new Point(2, 25));
        pythonTools.selectAllString();
        return expect(editor.getSelectedBufferRange()).toEqual(new Range(new Point(2, 19), new Point(2, 36)));
      });
      it("selects block string double qoutes correctly", function() {
        atom.config.set('python-tools.smartBlockSelection', false);
        editor.setCursorBufferPosition(new Point(4, 15));
        pythonTools.selectAllString();
        return expect(editor.getSelectedBufferRange()).toEqual(new Range(new Point(3, 18), new Point(7, 2)));
      });
      it("smart selects double qoutes correctly", function() {
        editor.setCursorBufferPosition(new Point(4, 15));
        pythonTools.selectAllString();
        return expect(editor.getSelectedBufferRanges()).toEqual([new Range(new Point(4, 2), new Point(4, 21)), new Range(new Point(5, 2), new Point(5, 25)), new Range(new Point(6, 2), new Point(6, 15))]);
      });
      it("selects block string single qoutes correctly", function() {
        atom.config.set('python-tools.smartBlockSelection', false);
        editor.setCursorBufferPosition(new Point(9, 15));
        pythonTools.selectAllString();
        return expect(editor.getSelectedBufferRange()).toEqual(new Range(new Point(8, 19), new Point(10, 2)));
      });
      it("smart selects single qoutes correctly", function() {
        editor.setCursorBufferPosition(new Point(9, 15));
        pythonTools.selectAllString();
        return expect(editor.getSelectedBufferRanges()).toEqual([new Range(new Point(9, 2), new Point(9, 19))]);
      });
      it("it selects block SQL double qoutes correctly", function() {
        atom.config.set('python-tools.smartBlockSelection', false);
        editor.setCursorBufferPosition(new Point(12, 20));
        pythonTools.selectAllString();
        return expect(editor.getSelectedBufferRange()).toEqual(new Range(new Point(11, 16), new Point(13, 2)));
      });
      return it("it selects block SQL single qoutes correctly", function() {
        atom.config.set('python-tools.smartBlockSelection', false);
        editor.setCursorBufferPosition(new Point(14, 20));
        pythonTools.selectAllString();
        return expect(editor.getSelectedBufferRange()).toEqual(new Range(new Point(14, 17), new Point(16, 2)));
      });
    });
    return describe("when a response is returned from tools.py", function() {
      it("informs the user with an info notification when no items were found", function() {
        var notification;
        pythonTools.handleJediToolsResponse({
          type: "usages",
          definitions: []
        });
        notification = atom.notifications.getNotifications()[0];
        return expect(notification.type).toBe('info');
      });
      it("informs the user with an error notification on error", function() {
        var notification;
        pythonTools.handleJediToolsResponse({
          "error": "this is a test error"
        });
        notification = atom.notifications.getNotifications()[0];
        return expect(notification.type).toBe('error');
      });
      return it("informs the user with an error notification on invalid type", function() {
        var notification;
        pythonTools.handleJediToolsResponse({
          type: "monkeys",
          definitions: [
            {
              line: 0,
              column: 0
            }
          ]
        });
        notification = atom.notifications.getNotifications()[0];
        return expect(notification.type).toBe('error');
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/Marvin/.atom/packages/python-tools/spec/python-tools-spec.coffee
