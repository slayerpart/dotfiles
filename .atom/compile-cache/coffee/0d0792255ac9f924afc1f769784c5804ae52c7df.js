(function() {
  describe('helpers', function() {
    var helpers;
    helpers = require('../lib/helpers');
    beforeEach(function() {
      return atom.notifications.clear();
    });
    describe('::error', function() {
      return it('adds an error notification', function() {
        helpers.error(new Error());
        return expect(atom.notifications.getNotifications().length).toBe(1);
      });
    });
    return describe('::shouldTriggerLinter', function() {
      var bufferModifying, lintOnFly, normalLinter;
      normalLinter = {
        grammarScopes: ['*'],
        scope: 'file',
        modifiesBuffer: false,
        lintOnFly: false,
        lint: function() {}
      };
      lintOnFly = {
        grammarScopes: ['*'],
        scope: 'file',
        modifiesBuffer: false,
        lintOnFly: true,
        lint: function() {}
      };
      bufferModifying = {
        grammarScopes: ['*'],
        scope: 'file',
        modifiesBuffer: true,
        lintOnFly: false,
        lint: function() {}
      };
      it('accepts a wildcard grammarScope', function() {
        return expect(helpers.shouldTriggerLinter(normalLinter, false, false, ['*'])).toBe(true);
      });
      it('runs lintOnFly ones on both save and lintOnFly', function() {
        expect(helpers.shouldTriggerLinter(lintOnFly, false, false, ['*'])).toBe(true);
        return expect(helpers.shouldTriggerLinter(lintOnFly, false, true, ['*'])).toBe(true);
      });
      it("doesn't run save ones on fly", function() {
        return expect(helpers.shouldTriggerLinter(normalLinter, false, true, ['*'])).toBe(false);
      });
      return it('runs only if bufferModifying flag matches with linter', function() {
        expect(helpers.shouldTriggerLinter(normalLinter, false, false, ['*'])).toBe(true);
        expect(helpers.shouldTriggerLinter(normalLinter, true, false, ['*'])).toBe(false);
        expect(helpers.shouldTriggerLinter(bufferModifying, false, false, ['*'])).toBe(false);
        return expect(helpers.shouldTriggerLinter(bufferModifying, true, false, ['*'])).toBe(true);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL01hcnZpbi8uYXRvbS9wYWNrYWdlcy9saW50ZXIvc3BlYy9oZWxwZXJzLXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxFQUFBLFFBQUEsQ0FBUyxTQUFULEVBQW9CLFNBQUEsR0FBQTtBQUNsQixRQUFBLE9BQUE7QUFBQSxJQUFBLE9BQUEsR0FBVSxPQUFBLENBQVEsZ0JBQVIsQ0FBVixDQUFBO0FBQUEsSUFDQSxVQUFBLENBQVcsU0FBQSxHQUFBO2FBQ1QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFuQixDQUFBLEVBRFM7SUFBQSxDQUFYLENBREEsQ0FBQTtBQUFBLElBSUEsUUFBQSxDQUFTLFNBQVQsRUFBb0IsU0FBQSxHQUFBO2FBQ2xCLEVBQUEsQ0FBRyw0QkFBSCxFQUFpQyxTQUFBLEdBQUE7QUFDL0IsUUFBQSxPQUFPLENBQUMsS0FBUixDQUFrQixJQUFBLEtBQUEsQ0FBQSxDQUFsQixDQUFBLENBQUE7ZUFDQSxNQUFBLENBQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBbkIsQ0FBQSxDQUFxQyxDQUFDLE1BQTdDLENBQW9ELENBQUMsSUFBckQsQ0FBMEQsQ0FBMUQsRUFGK0I7TUFBQSxDQUFqQyxFQURrQjtJQUFBLENBQXBCLENBSkEsQ0FBQTtXQVNBLFFBQUEsQ0FBUyx1QkFBVCxFQUFrQyxTQUFBLEdBQUE7QUFDaEMsVUFBQSx3Q0FBQTtBQUFBLE1BQUEsWUFBQSxHQUNFO0FBQUEsUUFBQSxhQUFBLEVBQWUsQ0FBQyxHQUFELENBQWY7QUFBQSxRQUNBLEtBQUEsRUFBTyxNQURQO0FBQUEsUUFFQSxjQUFBLEVBQWdCLEtBRmhCO0FBQUEsUUFHQSxTQUFBLEVBQVcsS0FIWDtBQUFBLFFBSUEsSUFBQSxFQUFNLFNBQUEsR0FBQSxDQUpOO09BREYsQ0FBQTtBQUFBLE1BTUEsU0FBQSxHQUNFO0FB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

//# sourceURL=/Users/Marvin/.atom/packages/linter/spec/helpers-spec.coffee
